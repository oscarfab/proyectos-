pipeline {
    agent any

    environment {
        APP_NAME = 'crud-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "${APP_NAME}:${IMAGE_TAG}"
        GIT_REPO = 'https://github.com/oscarfab/proyectos-.git'
        GIT_BRANCH = 'main'
        PROJECT_PATH = 'CRUD con Conexion a BD_MYSQL'
        CONTAINER_NAME = 'crud-mysql-container'
        APP_PORT = '8080'
        HOST_PORT = '8081'
    }

    tools {
        maven 'Maven'
        jdk 'Java'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Descargando c√≥digo desde GitHub...'
                checkout scmGit(
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                )
            }
        }

        stage('Navigate to Project') {
            steps {
                echo 'üìÇ Verificando directorio del proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'dir'
                        echo "‚úÖ Directorio actual: ${pwd()}"
                    }
                }
            }
        }

        stage('Clean') {
            steps {
                echo 'üßπ Limpiando proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn clean'
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                echo '‚öôÔ∏è Compilando proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn compile'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Ejecutando tests...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn test'
                    }
                }
            }
        }

        stage('Package') {
            steps {
                echo 'üì¶ Empaquetando aplicaci√≥n...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construyendo imagen Docker...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat "docker build -t ${DOCKER_IMAGE} ."
                        bat "docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest"
                    }
                }
            }
        }

        stage('Stop Old Container') {
            steps {
                echo 'üõë Deteniendo contenedor anterior (si existe)...'
                script {
                    dir("${PROJECT_PATH}") {
                        // Detener contenedor si existe
                        bat(script: "docker stop ${CONTAINER_NAME}", returnStatus: true)
                        // Eliminar contenedor si existe
                        bat(script: "docker rm ${CONTAINER_NAME}", returnStatus: true)
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo 'üöÄ Iniciando contenedor Docker...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat """
                            docker run -d ^
                            --name ${CONTAINER_NAME} ^
                            -p ${HOST_PORT}:${APP_PORT} ^
                            -e MYSQL_HOST=host.docker.internal ^
                            -e MYSQL_USER=root ^
                            -e MYSQL_PASSWORD=oscar ^
                            ${APP_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Verify Container') {
            steps {
                echo '‚úÖ Verificando contenedor...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'docker ps -a'
                        echo 'üìã Mostrando logs completos del contenedor:'
                        bat "docker logs ${CONTAINER_NAME} || echo No hay logs disponibles a√∫n"
                        echo "üåê Aplicaci√≥n deber√≠a estar disponible en: http://localhost:${HOST_PORT}"
                        echo "üåê Swagger UI: http://localhost:${HOST_PORT}/swagger-ui.html"
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo 'üè• Verificando salud de la aplicaci√≥n...'
                script {
                    // Esperar 15 segundos para que la app inicie
                    echo '‚è≥ Esperando 20 segundos para que la aplicaci√≥n inicie...'
                    sleep(20)

                    echo 'üìã Logs despu√©s de esperar:'
                    bat "docker logs ${CONTAINER_NAME}"

                    // Verificar que el contenedor est√© corriendo
                    def containerRunning = bat(
                        script: "docker ps --filter name=${CONTAINER_NAME} --format \"{{.Names}}\"",
                        returnStdout: true
                    ).trim()

                    if (containerRunning.contains(CONTAINER_NAME)) {
                        echo "‚úÖ Contenedor est√° corriendo"

                        // Verificar estado del contenedor
                        def containerStatus = bat(
                            script: "docker inspect ${CONTAINER_NAME} --format=\"{{.State.Status}}\"",
                            returnStdout: true
                        ).trim()

                        echo "üìä Estado del contenedor: ${containerStatus}"

                        if (containerStatus.contains("running")) {
                            echo "‚úÖ ¬°Aplicaci√≥n desplegada exitosamente!"
                        } else {
                            echo "‚ö†Ô∏è Contenedor existe pero no est√° en estado 'running'"
                            echo "üìã Logs finales:"
                            bat "docker logs ${CONTAINER_NAME}"
                        }
                    } else {
                        echo "‚ö†Ô∏è El contenedor no est√° corriendo"
                        echo "üìã Logs del contenedor:"
                        bat "docker logs ${CONTAINER_NAME}"
                        echo "‚ö†Ô∏è Warning: Contenedor no est√° activo, pero el build contin√∫a"
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ ¬°Build y despliegue completados exitosamente!'
            echo "üê≥ Imagen Docker: ${DOCKER_IMAGE}"
            echo "üì¶ Contenedor: ${CONTAINER_NAME}"
            echo "üåê URL: http://localhost:${HOST_PORT}"
            echo "üìå Build Number: ${BUILD_NUMBER}"
            echo ''
            echo 'üìã Comandos √∫tiles:'
            echo "   Ver logs:     docker logs ${CONTAINER_NAME}"
            echo "   Ver logs -f:  docker logs -f ${CONTAINER_NAME}"
            echo "   Detener:      docker stop ${CONTAINER_NAME}"
            echo "   Reiniciar:    docker restart ${CONTAINER_NAME}"
            echo "   Eliminar:     docker rm -f ${CONTAINER_NAME}"
        }
        failure {
            echo '‚ùå Build fall√≥. Revisa los logs para m√°s detalles.'
            echo 'üîç Verifica:'
            echo '   1. Docker Desktop est√° corriendo'
            echo '   2. No hay conflictos de puertos'
            echo '   3. El archivo JAR se gener√≥ correctamente'
        }
        always {
            echo 'üßπ Limpiando workspace...'
            cleanWs()
        }
    }
}}