pipeline {
    agent any

    environment {
        APP_NAME = 'crud-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "${APP_NAME}:${IMAGE_TAG}"
        GIT_REPO = 'https://github.com/oscarfab/proyectos-.git'
        GIT_BRANCH = 'main'
        PROJECT_PATH = 'CRUD con Conexion a BD_MYSQL'
        CONTAINER_NAME = 'crud-mysql-container'
        APP_PORT = '8080'
        HOST_PORT = '8081'
    }

    tools {
        maven 'Maven'
        jdk 'Java'
    }

    stages {
        stage('Checkout') {
            steps {
                echo ' Descargando código desde GitHub...'
                checkout scmGit(
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                )
            }
        }

        stage('Navigate to Project') {
            steps {
                echo ' Verificando directorio del proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'dir'
                        echo " Directorio actual: ${pwd()}"
                    }
                }
            }
        }

        stage('Clean') {
            steps {
                echo ' Limpiando proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn clean'
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                echo ' Compilando proyecto...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn compile'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo ' Ejecutando tests...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn test'
                    }
                }
            }
        }

        stage('Package') {
            steps {
                echo ' Empaquetando aplicación...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'mvn package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo ' Construyendo imagen Docker...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat "docker build -t ${DOCKER_IMAGE} ."
                        bat "docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest"
                    }
                }
            }
        }

        stage('Stop Old Container') {
            steps {
                echo ' Deteniendo contenedor anterior (si existe)...'
                script {
                    dir("${PROJECT_PATH}") {
                        // Detener contenedor si existe
                        bat(script: "docker stop ${CONTAINER_NAME}", returnStatus: true)
                        // Eliminar contenedor si existe
                        bat(script: "docker rm ${CONTAINER_NAME}", returnStatus: true)
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo ' Iniciando contenedor Docker...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat """
                            docker run -d ^
                            --name ${CONTAINER_NAME} ^
                            -p ${HOST_PORT}:${APP_PORT} ^
                            --network bridge ^
                            ${APP_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Verify Container') {
            steps {
                echo ' Verificando contenedor...'
                script {
                    dir("${PROJECT_PATH}") {
                        bat 'docker ps -a'
                        bat "docker logs ${CONTAINER_NAME}"
                        echo " Aplicación disponible en: http://localhost:${HOST_PORT}"
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo ' Verificando salud de la aplicación...'
                script {
                    // Esperar 10 segundos para que la app inicie
                    sleep(10)

                    // Verificar que el contenedor esté corriendo
                    def containerStatus = bat(
                        script: "docker inspect -f {{.State.Running}} ${CONTAINER_NAME}",
                        returnStdout: true
                    ).trim()

                    if (containerStatus == "true") {
                        echo " Contenedor está corriendo correctamente"
                    } else {
                        error " El contenedor no está corriendo"
                    }
                }
            }
        }
    }

    post {
        success {
            echo ' ¡Build y despliegue completados exitosamente!'
            echo " Imagen Docker: ${DOCKER_IMAGE}"
            echo " Contenedor: ${CONTAINER_NAME}"
            echo " URL: http://localhost:${HOST_PORT}"
            echo " Build Number: ${BUILD_NUMBER}"
            echo ''
            echo ' Comandos útiles:'
            echo "   Ver logs:     docker logs ${CONTAINER_NAME}"
            echo "   Ver logs -f:  docker logs -f ${CONTAINER_NAME}"
            echo "   Detener:      docker stop ${CONTAINER_NAME}"
            echo "   Reiniciar:    docker restart ${CONTAINER_NAME}"
            echo "   Eliminar:     docker rm -f ${CONTAINER_NAME}"
        }
        failure {
            echo ' Build falló. Revisa los logs para más detalles.'
            echo ' Verifica:'
            echo '   1. Docker Desktop está corriendo'
            echo '   2. No hay conflictos de puertos'
            echo '   3. El archivo JAR se generó correctamente'
        }
        always {
            echo '🧹 Limpiando workspace...'
            cleanWs()
        }
    }
}