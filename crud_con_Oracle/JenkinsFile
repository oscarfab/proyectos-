pipeline {
    agent any

    environment {
        APP_NAME         = 'crud-oracle-app'
        DOCKER_IMAGE     = "${APP_NAME}:latest"
        PROJECT_PATH     = 'crud_con_Oracle'
        CONTAINER_NAME   = 'crud-oracle-container'
        ORACLE_CONTAINER = 'oracle-db'
        APP_PORT         = '8088'
        GIT_REPO         = 'https://github.com/oscarfab/proyectos-.git'
        GIT_BRANCH       = 'main'
        NETWORK_NAME     = 'jenkins-net'
    }

    tools {
        maven 'Maven'
        jdk 'Java'
    }

    stages {

        // üßæ 1Ô∏è‚É£ DESCARGAR C√ìDIGO
        stage('Checkout') {
            steps {
                echo 'üì• Descargando c√≥digo desde GitHub...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                ])
            }
        }

        // üß™ 2Ô∏è‚É£ COMPILAR Y PROBAR CON H2
        stage('Compilar y ejecutar pruebas unitarias') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üß™ Ejecutando pruebas con H2 (sin Oracle)...'
                        bat 'mvn clean verify'
                    }
                }
            }
            post {
                always {
                    echo 'üìä Publicando resultados de pruebas unitarias...'
                    // üìÅ Publicar resultados de JUnit
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'

                    // üìà Publicar cobertura con JaCoCo
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java',
                        inclusionPattern: '**/*.class',
                        exclusionPattern: '**/test/**'
                    )
                }
            }
        }

        // üåê 3Ô∏è‚É£ CREAR RED DOCKER
        stage('Crear red Docker') {
            steps {
                script {
                    echo 'üåê Creando red Docker compartida...'
                    bat "docker network create ${NETWORK_NAME} || exit 0"
                }
            }
        }

        // üóÉÔ∏è 4Ô∏è‚É£ INICIAR CONTENEDOR ORACLE
        stage('Iniciar Oracle XE') {
            steps {
                script {
                    echo 'üóÉÔ∏è Iniciando contenedor de Oracle XE...'
                    bat "docker stop ${ORACLE_CONTAINER} || exit 0"
                    bat "docker rm ${ORACLE_CONTAINER} || exit 0"
                    bat """
                        docker run -d ^
                        --name ${ORACLE_CONTAINER} ^
                        --network ${NETWORK_NAME} ^
                        -p 1521:1521 ^
                        -e ORACLE_PASSWORD=oracle ^
                        gvenzl/oracle-xe:21-slim
                    """
                }
            }
        }

        // ‚è≥ 5Ô∏è‚É£ ESPERAR ORACLE
        stage('Esperar Oracle') {
            steps {
                script {
                    echo '‚è≥ Esperando a que Oracle est√© listo...'
                    sleep(time: 120, unit: 'SECONDS')

                    echo 'üîç Verificando estado de Oracle...'
                    bat "docker logs ${ORACLE_CONTAINER}"

                    echo '‚úÖ Oracle deber√≠a estar listo ahora'
                }
            }
        }

        // üèóÔ∏è 6Ô∏è‚É£ CONSTRUIR IMAGEN DE LA APP
        stage('Construir imagen Docker') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üèóÔ∏è Construyendo imagen Docker de la aplicaci√≥n...'
                        bat "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        // üöÄ 7Ô∏è‚É£ DESPLEGAR APP CON ORACLE
        stage('Ejecutar aplicaci√≥n con Oracle') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üöÄ Desplegando aplicaci√≥n conectada a Oracle...'
                        bat "docker stop ${CONTAINER_NAME} || exit 0"
                        bat "docker rm ${CONTAINER_NAME} || exit 0"
                       bat """docker run -d ^
                       --name ${CONTAINER_NAME} ^
                       --network ${NETWORK_NAME} ^
                       --restart unless-stopped ^
                       -p ${APP_PORT}:${APP_PORT} ^
                       -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@${ORACLE_CONTAINER}:1521/XEPDB1 ^
                       -e SPRING_DATASOURCE_USERNAME=system ^
                       -e SPRING_DATASOURCE_PASSWORD=oracle ^
                       -e SPRING_JPA_HIBERNATE_DDL_AUTO=update ^
                       ${DOCKER_IMAGE}
                       """
                    }
                }
            }
        }

        // ‚úÖ 8Ô∏è‚É£ VERIFICAR DEPLOY (OPCIONAL)
        stage('Verificar despliegue') {
            steps {
                echo "üåç Verificando aplicaci√≥n en http://localhost:${APP_PORT}/swagger-ui.html"
            }
        }
    }

   post {
       always {
           echo 'üßπ Pipeline finalizado'
       }
       success {
           echo "‚úÖ Pipeline completado con √©xito."
           echo "üìä App: http://localhost:${APP_PORT}/swagger-ui.html"
           echo "üóÉÔ∏è Oracle DB: localhost:1521 (usuario: system, password: oracle)"
           echo ""
           echo "‚ö†Ô∏è Para detener todo ejecuta:"
           echo "   docker stop ${CONTAINER_NAME} ${ORACLE_CONTAINER}"
           echo "   docker rm ${CONTAINER_NAME} ${ORACLE_CONTAINER}"
       }
       failure {
           echo "‚ùå Error en el pipeline. Revisa los logs."
           echo "üîç Para diagnosticar:"
           echo "   docker logs ${ORACLE_CONTAINER}"
           echo "   docker logs ${CONTAINER_NAME}"
       }
   }

}