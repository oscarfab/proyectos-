pipeline {
    agent any

    environment {
        APP_NAME            = 'crud-oracle-app'
        IMAGE_TAG           = "${BUILD_NUMBER}"
        DOCKER_IMAGE        = "${APP_NAME}:${IMAGE_TAG}"
        GIT_REPO            = 'https://github.com/oscarfab/proyectos-.git'
        GIT_BRANCH          = 'main'
        PROJECT_PATH        = 'crud_con_Oracle'
        CONTAINER_NAME      = 'crud-oracle-container'
        ORACLE_CONTAINER    = 'oracle-jenkins'
        APP_PORT            = '8088'
        HOST_PORT           = '8088'
        ORACLE_PASSWORD     = 'oracle'
        ORACLE_SERVICE      = 'xepdb1'
    }

    tools {
        maven 'Maven'
        jdk 'Java'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Descargando c√≥digo...'
                checkout scmGit(
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                )
            }
        }

        stage('Start Oracle for Tests & App') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        // Detener y eliminar si ya existe
                        bat "docker stop ${ORACLE_CONTAINER} || exit 0"
                        bat "docker rm ${ORACLE_CONTAINER} || exit 0"

                        // Iniciar Oracle en background
                        bat """
                            docker run -d ^
                            --name ${ORACLE_CONTAINER} ^
                            -p 1521:1521 ^
                            -e ORACLE_PASSWORD=${ORACLE_PASSWORD} ^
                            gvenzl/oracle-xe:21-slim
                        """
                    }
                }
            }
        }

        stage('Wait for Oracle to be ready') {
            steps {
                echo '‚è≥ Esperando a que Oracle est√© listo (90s)...'
                sleep(90)
            }
        }

        stage('Run Unit & Integration Tests with Oracle') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        // Ejecutar tests conect√°ndose al contenedor de Oracle
                        bat 'mvn clean package'
                    }
                }
            }
           post {
               always {
                   script {
                       dir("${PROJECT_PATH}") {
                           // Publicar resultados de pruebas
                           if (fileExists('target/surefire-reports')) {
                               junit 'target/surefire-reports/*.xml'
                           }
                           // Publicar cobertura con el plugin JaCoCo oficial
                           if (fileExists('target/jacoco.exec')) {
                               jacoco(
                                   execPattern: 'target/jacoco.exec',
                                   classPattern: 'target/classes',
                                   sourcePattern: 'src/main/java',
                                   exclusionPattern: 'src/test*'
                               )
                           }
                       }
                   }
               }
           }

        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        bat "docker build -t ${DOCKER_IMAGE} ."
                        bat "docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest"
                    }
                }
            }
        }

        stage('Stop App Container (if running)') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        bat "docker stop ${CONTAINER_NAME} || exit 0"
                        bat "docker rm ${CONTAINER_NAME} || exit 0"
                    }
                }
            }
        }

        stage('Run Application with Oracle') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        bat """
                            docker run -d ^
                            --name ${CONTAINER_NAME} ^
                            --network host ^
                            -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@localhost:1521/${ORACLE_SERVICE} ^
                            -e SPRING_DATASOURCE_USERNAME=system ^
                            -e SPRING_DATASOURCE_PASSWORD=${ORACLE_PASSWORD} ^
                            ${APP_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sleep(20)
                    bat "docker logs ${CONTAINER_NAME}"
                    echo "‚úÖ App desplegada: http://localhost:${HOST_PORT}/swagger-ui.html"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ ¬°Pipeline completado con √©xito!"
            echo "‚úÖ App: http://localhost:${HOST_PORT}/swagger-ui.html"
        }
        always {
            // Opcional: detener Oracle al final (o dejarlo para debugging)
            script {
                dir("${PROJECT_PATH}") {
                    bat "docker stop ${ORACLE_CONTAINER} || exit 0"
                    bat "docker rm ${ORACLE_CONTAINER} || exit 0"
                }
            }
            cleanWs()
        }
    }
}