pipeline {
    agent any

    environment {
        APP_NAME         = 'crud-oracle-app'
        DOCKER_IMAGE     = "${APP_NAME}:latest"
        PROJECT_PATH     = 'crud_con_Oracle'
        CONTAINER_NAME   = 'crud-oracle-container'
        ORACLE_CONTAINER = 'oracle-db'
        APP_PORT         = '8088'
        GIT_REPO         = 'https://github.com/oscarfab/proyectos-.git'
        GIT_BRANCH       = 'main'
        NETWORK_NAME     = 'jenkins-net'
    }

    tools {
        maven 'Maven'
        jdk 'Java'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'üì• Descargando c√≥digo desde GitHub...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                ])
            }
        }

        stage('Compilar y ejecutar pruebas unitarias') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üß™ Ejecutando pruebas con H2 (sin Oracle)...'
                        bat 'mvn clean verify'
                    }
                }
            }
            post {
                always {
                    echo 'üìä Publicando resultados de pruebas unitarias...'
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java',
                        inclusionPattern: '**/*.class',
                        exclusionPattern: '**/test/**'
                    )
                }
            }
        }

        stage('Crear red Docker') {
            steps {
                script {
                    echo 'üåê Creando red Docker compartida...'
                    bat "docker network create ${NETWORK_NAME} || exit 0"
                }
            }
        }

        stage('Iniciar Oracle XE') {
            steps {
                script {
                    echo 'üóÉÔ∏è Iniciando contenedor de Oracle XE...'
                    bat "docker stop ${ORACLE_CONTAINER} || exit 0"
                    bat "docker rm ${ORACLE_CONTAINER} || exit 0"
                    bat """docker run -d ^
--name ${ORACLE_CONTAINER} ^
--network ${NETWORK_NAME} ^
-p 1521:1521 ^
-e ORACLE_PASSWORD=oracle ^
gvenzl/oracle-xe:21-slim"""
                }
            }
        }

        stage('Esperar Oracle') {
            steps {
                script {
                    echo '‚è≥ Esperando a que Oracle est√© listo...'
                    sleep(time: 120, unit: 'SECONDS')
                    echo 'üîç Verificando estado de Oracle...'
                    bat "docker logs ${ORACLE_CONTAINER}"
                    echo '‚úÖ Oracle deber√≠a estar listo ahora'
                }
            }
        }

        stage('Construir imagen Docker') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üèóÔ∏è Construyendo imagen Docker de la aplicaci√≥n...'
                        bat "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Ejecutar aplicaci√≥n con Oracle') {
            steps {
                script {
                    dir("${PROJECT_PATH}") {
                        echo 'üöÄ Desplegando aplicaci√≥n conectada a Oracle...'
                        bat "docker stop ${CONTAINER_NAME} || exit 0"
                        bat "docker rm ${CONTAINER_NAME} || exit 0"
                        bat """docker run -d ^
--name ${CONTAINER_NAME} ^
--network ${NETWORK_NAME} ^
--restart unless-stopped ^
-p ${APP_PORT}:${APP_PORT} ^
-e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@${ORACLE_CONTAINER}:1521/XEPDB1 ^
-e SPRING_DATASOURCE_USERNAME=system ^
-e SPRING_DATASOURCE_PASSWORD=oracle ^
-e SPRING_JPA_HIBERNATE_DDL_AUTO=update ^
${DOCKER_IMAGE}"""

                        echo '‚è≥ Esperando 30 segundos para que la app inicie...'
                        sleep(time: 30, unit: 'SECONDS')

                        echo 'üîç Logs de la aplicaci√≥n:'
                        bat "docker logs ${CONTAINER_NAME}"
                    }
                }
            }
        }

        stage('Verificar despliegue') {
            steps {
                script {
                    echo 'üåç Aplicaci√≥n desplegada'
                    echo "Swagger: http://localhost:${APP_PORT}/swagger-ui.html"
                    echo "Health: http://localhost:${APP_PORT}/actuator/health"
                    bat "docker ps --filter name=${CONTAINER_NAME}"
                    bat "docker ps --filter name=${ORACLE_CONTAINER}"
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Pipeline finalizado'
        }
        success {
            echo '‚úÖ =========================================='
            echo '‚úÖ PIPELINE EXITOSO'
            echo '‚úÖ =========================================='
            echo ''
            echo "üìä Swagger: http://localhost:${APP_PORT}/swagger-ui.html"
            echo "üíö Health: http://localhost:${APP_PORT}/actuator/health"
            echo "üì° API: http://localhost:${APP_PORT}/api/empleados"
            echo ''
            echo 'üóÉÔ∏è Oracle: localhost:1521 (system/oracle)'
            echo ''
            echo '‚ö†Ô∏è Para detener:'
            echo "   docker stop ${CONTAINER_NAME} ${ORACLE_CONTAINER}"
        }
        failure {
            echo '‚ùå ERROR EN EL PIPELINE'
            echo "üîç docker logs ${ORACLE_CONTAINER}"
            echo "üîç docker logs ${CONTAINER_NAME}"
        }
    }
}